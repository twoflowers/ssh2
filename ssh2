#!/usr/bin/env python
import subprocess, json, os, sys, time
from optparse import OptionParser
from datetime import datetime, timedelta

cache_file_list = '/tmp/.ssh2_list'
cache_file_num = '/tmp/.ssh2_num'
ssh_key_ident = os.environ['HOME'] + "/.ssh"
days_to_expire_cache = 1

usage = "usage: %prog [options] [server_number]\n\
         server_number: a numeric value corresponding to the server number\n\
         e.g.: '%prog 1' will ssh into the 1st server in the list."

parser = OptionParser(usage)

parser.add_option(
    "-x", "--bust-cache", action="store_true",
    help="refetch servers list from AWS"
)

parser.add_option(
    "-u", "--user", action="store",
    dest="user", default="ubuntu",
    help="provide user (default: ubuntu)"
)

parser.add_option(
    "-i", "--ident", action="store",
    help="provide the identity file"
)

parser.add_option(
    "-n", "--name", action="store",
    help="use the instance name to connect"
)

(options, args) = parser.parse_args()

num = ''
if args:
    if not args[0].isdigit():
        print "'server_number' must be a numeric value"
        sys.exit()
    num = int(args[0])

def extract_name(instance):
    if instance['Tags']:
        for tag in instance['Tags']:
            if tag['Key'] == 'Name' and tag['Value']:
                return tag['Value']
    return '.'

def rebuild_cache():
    print "Fetching servers..."
    output = subprocess.Popen("aws ec2 describe-instances", shell=True, stdout=subprocess.PIPE).stdout.read()
    with open(cache_file_list, 'w') as f:
        f.write(output)

# check the last time that the file was generated, if it was greater than x go ahead and rebuild
cahce_last_modified = datetime.fromtimestamp(os.path.getctime(cache_file_list))# time.ctime(os.path.getmtime(cache_file_list))
expire_cache_max = datetime.now() - timedelta(days=days_to_expire_cache)

if cahce_last_modified < expire_cache_max:
    rebuild_cache()


if options.bust_cache or not os.path.exists(cache_file_list):
    rebuild_cache()

if options.ident or not os.path.exists(cache_file_list):
    for file in os.listdir(ssh_key_ident):
        if file.endswith(".pem"):
            if options.ident + '.pem' == file:
                ident_key = file
            else:
                ident_key = ''

if options.name:
    ''' we are going to use the name '''

    # sanity check the name

    # make sure that the name is in the list

    # pass in the value





output = open(cache_file_list).read()
parsed = json.loads(output)

all_instances = []
for instances in parsed['Reservations']:
    for instance in instances['Instances']:
        all_instances.append(instance)

if not num:
    print "\nServers list:\n"
    for i, instance in enumerate(all_instances, 1):
        choice = '[%d]' % i
        name = extract_name(instance)
        print '%-4s %-55s %-30s' % (choice, instance['PublicDnsName'], name)

default_num = 1
if os.path.exists(cache_file_num):
    default_num = open(cache_file_num).read()

ok = not not num

while not ok or not num:
    try:
        num = raw_input("\nWhich server would you like to connect to [" + str(default_num) + "]? ")

        if not num:
            num = int(default_num)
            break

        ok = num.isdigit() and 1 <= int(num) <= i

        if ok:
            num = int(num)
            break

        print "ERR: please enter a value between 1 and " + str(i)

    except (EOFError, KeyboardInterrupt) as e:
        print "\nExiting..."
        sys.exit()

with open(cache_file_num, 'w') as f:
    f.write(str(num))

instance = all_instances[num - 1]
dns = instance['PublicDnsName']

print "\nConnecting to", extract_name(instance), dns

if options.ident and ident_key != '':
    os.system('ssh -i ' + ssh_key_ident + '/' + ident_key + ' ' + options.user + '@' + dns)
    print 'ssh -i ' + ssh_key_ident + '/' + ident_key + ' ' + options.user + '@' + dns

else:
    os.system('ssh '+ options.user + '@' + dns)
    print 'ssh '+ options.user + '@' + dns
